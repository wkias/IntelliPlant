<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.factory.dao.BankAccountDao">

	<select id="get" resultType="com.bootdo.factory.myOffice.domain.BankAccountDO">
		select `bank_account_id`,`collection_account`,`bank_account`,`bank_name`,`is_deleted`,`create_user_id`,`create_time` from bank_account where bank_account_id = #{value}
	</select>

	<select id="list" resultType="com.bootdo.factory.myOffice.domain.BankAccountDO">
		select `bank_account_id`,`collection_account`,`bank_account`,`bank_name`,`is_deleted`,`create_user_id`,`create_time` from bank_account
        <where>
			is_deleted = 0
		  		  <if test="bankAccountId != null and bankAccountId != ''"> and bank_account_id = #{bankAccountId} </if>
		  		  <if test="collectionAccount != null and collectionAccount != ''"> and collection_account = #{collectionAccount} </if>
		  		  <if test="bankAccount != null and bankAccount != ''"> and bank_account = #{bankAccount} </if>
		  		  <if test="bankName != null and bankName != ''"> and bank_name = #{bankName} </if>
		  		  <if test="isDeleted != null and isDeleted != ''"> and is_deleted = #{isDeleted} </if>
		  		  <if test="createUserId != null and createUserId != ''"> and create_user_id = #{createUserId} </if>
		  		  <if test="createTime != null and createTime != ''"> and create_time = #{createTime} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
                order by bank_account_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from bank_account
		 <where>
			 is_deleted = 0
		  		  <if test="bankAccountId != null and bankAccountId != ''"> and bank_account_id = #{bankAccountId} </if>
		  		  <if test="collectionAccount != null and collectionAccount != ''"> and collection_account = #{collectionAccount} </if>
		  		  <if test="bankAccount != null and bankAccount != ''"> and bank_account = #{bankAccount} </if>
		  		  <if test="bankName != null and bankName != ''"> and bank_name = #{bankName} </if>
		  		  <if test="isDeleted != null and isDeleted != ''"> and is_deleted = #{isDeleted} </if>
		  		  <if test="createUserId != null and createUserId != ''"> and create_user_id = #{createUserId} </if>
		  		  <if test="createTime != null and createTime != ''"> and create_time = #{createTime} </if>
		  		</where>
	</select>
	 
	<insert id="save" parameterType="com.bootdo.factory.myOffice.domain.BankAccountDO">
		insert into bank_account
		(
			`bank_account_id`, 
			`collection_account`, 
			`bank_account`, 
			`bank_name`, 
			`is_deleted`, 
			`create_user_id`,
			`create_time`
		)
		values
		(
			#{bankAccountId}, 
			#{collectionAccount}, 
			#{bankAccount}, 
			#{bankName}, 
			#{isDeleted}, 
			#{createUserId},
			#{createTime}
		)
	</insert>
	 
	<update id="update" parameterType="com.bootdo.factory.myOffice.domain.BankAccountDO">
		update bank_account 
		<set>
			<if test="collectionAccount != null">`collection_account` = #{collectionAccount}, </if>
			<if test="bankAccount != null">`bank_account` = #{bankAccount}, </if>
			<if test="bankName != null">`bank_name` = #{bankName}, </if>
			<if test="isDeleted != null">`is_deleted` = #{isDeleted}, </if>
			<if test="creatUserId != null">`create_user_id` = #{createUserId}, </if>
			<if test="createTime != null">`create_time` = #{createTime}</if>
		</set>
		where bank_account_id = #{bankAccountId}
	</update>

	<delete id="remove">
		update bank_account
		<set>
			is_deleted = 1
			where
			bank_account_id = #{bankAccountId}
		</set>
	</delete>

	<delete id="batchRemove">
		update bank_account
		set is_deleted = 1
		where bank_account_id in
		<foreach item="bankAccountId" collection="array" open="(" separator="," close=")">
			#{bankAccountId}
		</foreach>
	</delete>
</mapper>